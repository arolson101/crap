
schema {
  query: Query
  mutation: Mutation
}

type Query {
  dbs: [String!]!
  bank(bankId: ID!): Bank!
  banks: [Bank!]!
  account(accountId: ID!): Account!
}

type Mutation {
  openDb(name: String!, password: String!): Boolean!
  closeDb: Boolean!

  saveBank(input: BankInput!, bankId: ID): Bank
  deleteBank(bankId: ID!): Boolean!

  saveAccount(input: AccountInput!, accountId: ID, bankId: ID): Account
  deleteAccount(bankId: ID!, accountId: ID!): Boolean!
}

###############################################################################

input DbInput {
  name: String!
  password: String!
}

###############################################################################

input BankInput {
  name: String
  web: String
  address: String
  notes: String
  favicon: String

  online: Boolean

  fid: String
  org: String
  ofx: String

  username: String
  password: String
}

type Bank {
  id: ID!

  name: String!
  web: String!
  address: String!
  notes: String!
  favicon: String!

  online: Boolean!

  fid: String!
  org: String!
  ofx: String!

  username: String!
  password: String!

  accounts: [Account!]!
}

###############################################################################

enum AccountType {
  CHECKING
  SAVINGS
  MONEYMRKT
  CREDITLINE
  CREDITCARD
}

input AccountInput {
  name: String
  color: String
  routing: String
  type: AccountType
  number: String
  visible: Boolean
  key: String
}

type Account {
  id: ID!
  name: String!
  color: String!
  routing: String!
  type: AccountType!
  number: String!
  visible: Boolean!
  key: String!
}

###############################################################################

type Split {
  category: Category
  amount: Float
}

type Transaction {
  id: ID!
  accountId: ID!
  serverid: String!
  time: Int!
  type: String!
  name: String!
  memo: String!
  amount: Float!
  split: [Split!]!
}

type Bill {
  id: ID!
  name: String!
  group: String!
  web: String!
  favicon: String!
  notes: String!
  amount: Float!
  account: Account!
  category: Category!
  rruleString: String!
  showAdvanced: Boolean!
}

type Budget {
  id: ID!
  name: String!
  categories: [Category!]!
  sortOrder: Int!
}

type Category {
  id: ID!
  budgetId: ID!
  name: String!
  amount: Float!
}
