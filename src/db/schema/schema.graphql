
schema {
  query: Query
  mutation: Mutation
}

type Query {
  dbs: [String!]!
  allCourses: [Course]!
  course(id: Int!): Course

  bank(bankId: ID!): Bank
  banks: [Bank]!
  account(accountId: ID!): Account!
}

type Mutation {
  openDb(name: String!, password: String!): Boolean
  closeDb: Boolean

  createAccountInBank(bankId: ID!, input: AccountInput): Account
  updateAccount(accountId: ID!, input: AccountInput): Account
  deleteAccount(accountId: ID!): Boolean
}

###############################################################################

type Course {
  id: Int!
  title: String!
  author: String!
  description: String!
  topic: String!
  url: String!
}

###############################################################################

input DbInput {
  name: String!
  password: String!
}

###############################################################################

input BankInput {
  name: String!
  web: String
  address: String
  notes: String
  favicon: String

  online: Boolean

  fid: String
  org: String
  ofx: String

  username: String
  password: String
}

type Bank {
  id: ID!

  name: String!
  web: String
  address: String
  notes: String
  favicon: String

  online: Boolean

  fid: String
  org: String
  ofx: String

  username: String
  password: String

  accounts: [Account]!
}

extend type Mutation {
  createBank(input: BankInput!): Bank
  updateBank(bankId: ID!, input: BankInput!): Bank
  deleteBank(bankId: ID!): Boolean
}

###############################################################################

enum AccountType {
  CHECKING
  SAVINGS
  MONEYMRKT
  CREDITLINE
  CREDITCARD
}

input AccountInput {
  name: String
  color: String
  type: AccountType
  number: String
  visible: Boolean
  bankid: String
  key: String
}

type Account {
  id: ID!
  name: String
  color: String
  type: AccountType
  number: String
  visible: Boolean
  bankid: String
  key: String
}

###############################################################################

type Split {
  category: Category
  amount: Float
}

type Transaction {
  id: ID!
  account: Account!
  serverid: String
  time: Int
  type: String
  name: String
  memo: String
  amount: Float
  split: [Split]!
}

type Bill {
  id: ID!
  name: String!
  group: String
  web: String
  favicon: String
  notes: String
  amount: Float
  account: Account
  category: Category
  rruleString: String
  showAdvanced: Boolean
}

type Budget {
  id: ID!
  name: String
  categories: [Category]!
  sortOrder: Int
}

type Category {
  id: ID!
  name: String
  amount: Float
}
